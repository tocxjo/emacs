#+AUTHOR: lemon / tocxjo
#+OPTIONS: toc:nil

* MELPA
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
    '(("MELPA"        . "https://melpa.org/packages/")
      ("GNU ELPA"     . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

* EMACS CONFIG
#+begin_src emacs-lisp
  ;; disable backup files
  (setq make-backup-files nil)

  ;; disable basic UI
  ;; (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)

  ;; disable cursor blink
  (blink-cursor-mode -1)

  ;; better visualization
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default fill-column 80)

  ;; relative line numbers
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  ;; inhibit startup message
  (setq inhibit-startup-message t)

  ;; disable initial scratch message
  (setq initial-scratch-message nil)

  ;; ignore case while searching
  (setq case-fold-search t)
  (setq grep-command "rg --no-heading --vimgrep --smart-case ")

  ;; enable tab-bar mode
  (tab-bar-mode 1)

  (set-language-environment "Japanese")

  ;; set coding system to UTF-8
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq buffer-file-coding-system 'utf-8)

  ;; alias for y/n/p
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; border
  (setq default-frame-alist '((internal-border-width . 12)))

  ;; opacity
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))

  ;; pomodoro sound
  (setq org-clock-sound "clave.wav")

  ;; tramp stuff
  (setq tramp-default-method "ssh")
  (setq tramp-verbose 10)
  (setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='~/.ssh/ssh-%%r@%%h:%%p' -o ControlPersist=yes")

  ;; hide emphasis markers in org mode
  (setq org-hide-emphasis-markers t)

  ;; change diary file location to ~/org
  (setq diary-file "~/org/diary")
#+end_src

** lsp-java windows configuration
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (setenv "JAVA_HOME" "C:/Program Files/Java/jdk-21/")
    (setq lsp-java-java-path "C:/Program Files/Java/jdk-21/bin/java.exe"))
#+end_src

** prettify symbols
#+begin_src emacs-lisp
   (add-hook
    'go-mode-hook
    (lambda ()
      (push '("error" . ?∇) prettify-symbols-alist)
      (push '("err" . ?⊙) prettify-symbols-alist)
      (push '("exists" . ?∃) prettify-symbols-alist)
      (push '(":= range" . ?∈) prettify-symbols-alist)
      (push '("ok" . ?✓) prettify-symbols-alist)
      (push '("==" . ?≡) prettify-symbols-alist)
      (push '(":=" . ?≔) prettify-symbols-alist)
      (push '(">=" . ?≥) prettify-symbols-alist)
      (push '("<=" . ?≤) prettify-symbols-alist)
      (push '("<-" . ?←) prettify-symbols-alist)
      (push '("!=" . ?≠) prettify-symbols-alist)
      (push '("..." . ?…) prettify-symbols-alist)
      (push '("context.Context" . ?◇) prettify-symbols-alist)
      (push '("ctx" . ?⋄) prettify-symbols-alist)
      (push '("mu" . ?❢) prettify-symbols-alist)
      (push '("&&" . ?∧) prettify-symbols-alist)
      (push '("||" . ?∨) prettify-symbols-alist)
      (push '("!" . ?¬) prettify-symbols-alist)
      (push '("interface{}" . ?⋆) prettify-symbols-alist)
      ))

   (add-hook
  'c-mode-common-hook 
  (lambda ()
    (push '("==" . ?≡) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '("!" . ?¬) prettify-symbols-alist)
    (push '("->" . ?→) prettify-symbols-alist)
    (push '("*" . ?∗) prettify-symbols-alist) ; Para punteros
    ))

   (add-hook
  'java-mode-common-hook 
  (lambda ()
    (push '("==" . ?≡) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '("!" . ?¬) prettify-symbols-alist)
    (push '("->" . ?→) prettify-symbols-alist)
    (push '("*" . ?∗) prettify-symbols-alist) ; Para punteros
    ))
  
   (global-prettify-symbols-mode 't)
#+end_src

* EVIL MODE
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    ;; (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
    ;; (evil-define-key 'visual org-mode-map (kbd "TAB") 'org-cycle)
    ;; (evil-define-key 'motion org-mode-map (kbd "TAB") 'org-cycle)
    ;; (with-eval-after-load 'evil-maps
    ;;   (define-key evil-motion-state-map (kbd "SPC") nil)
    ;;   (define-key evil-motion-state-map (kbd "RET") nil)
    ;;   (define-key evil-motion-state-map (kbd "TAB") nil))
    (define-key evil-motion-state-map (kbd "RET") nil)
    (evil-mode 1)
    (evil-set-undo-system 'undo-redo))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-org
    :ensure t
    :hook (org-mode . evil-org-mode)
    :config
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* GENERAL KEYBINDINGS
** creating functions for keybindings
#+begin_src emacs-lisp
  (defun pomodoro-start ()
    (interactive)
    (org-timer-set-timer 25))

  (defun pomodoro-long-break ()
    (interactive)
    (org-timer-set-timer 15))

  (defun goto-config ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))

  (defun pomodoro-break ()
    (interactive)
    (org-timer-set-timer 5))

  (defun reload-config ()
    (interactive)
    (load-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src

** define keybindings
#+begin_src emacs-lisp
   (use-package general
     :ensure t)

   (general-create-definer my-leader-def
     :prefix "SPC"
     :non-normal-prefix "M-SPC")

   (general-define-key
    :keymaps 'evil-insert-state-map
    "SPC" 'self-insert-command)

   (my-leader-def
    :keymaps 'evil-normal-state-map
    "f"  '(:ignore t :which-key "file")
    "fc" '(compile :which-key "compile file")
    "fd" '(find-file-in-directory :which-key "find file in directory")
    "ff" '(find-file :which-key "find file")
    "fp" '(goto-config :which-key "open config.org")
    "fr" '(recentf :which-key "recent files")
    "fs" '(save-buffer :which-key "save file")

    "."  '(find-file :which-key "find file")

    "b"  '(:ignore t :which-key "buffer")
    "bb" '(switch-to-buffer :which-key "switch to buffer")
    "bd" '(kill-buffer :which-key "delete buffer")
    "bj" '(previous-buffer :which-key "previous buffer")
    "bk" '(next-buffer :which-key "next buffer")
    "bl" '(buffer-menu :which-key "buffer menu")

    "h"  '(:ignore t :which-key "help")
    "hf" '(describe-function :which-key "describe function")
    "hm" '(man :which-key "manual entries")
    "hr" '(reload-config :which-key "reload init.el")

    "ht" '(consult-theme :which-key "load theme")
    "hv" '(describe-variable :which-key "describe variable")

    "n"  '(:ignore t :which-key "org-roam nodes")
    "nf" '(org-roam-node-find :which-key "find node")
    "ng" '(org-roam-ui-open :which-key "node graph")
    "ni" '(org-roam-node-insert :which-key "insert node")
    "nl" '(org-roam-buffer-toggle :which-key "toggle backlink buffer")
    "nt" '(org-roam-tag-add :which-key "add tag")

    "o"  '(:ignore t :which-key "org-mode commands")
    "oa" '(org-agenda :which-key "open org-agenda")
    "oc" '(org-goto-calendar :which-key "open org-calendar")
    "oe" '(org-export-dispatch :which-key "export to:")
    "oo" '(org-open-at-point :which-key "open link")
    "os" '(org-sort :which-key "sort current subtree or list")
    "oi" '(:ignore t :which-key "insert")
    "oi." '(org-time-stamp :which-key "insert timestamp")
    "oid" '(org-deadline :which-key "insert deadline")
    "oih" '(org-insert-heading :which-key "insert heading")
    "oil" '(org-insert-link :which-key "insert link")
    "oip" '(org-set-property :which-key "insert property")
    "ois" '(org-schedule :which-key "insert schedule")
    "oit" '(org-table-create-or-convert-from-region :which-key "insert table from region")
    "oi," '(org-insert-structure-template :which-key "insert structure")
    "p"   '(:ignore t :which-key "pomodoro")
    "pp"  '(pomodoro-start :which-key "start pomodoro")
    "pl"  '(:ignore t :which-key "long break")
    "plb" '(pomodoro-long-break :which-key "pomodoro long break")
    "pb"  '(pomodoro-break :which-key "pomodoro break")
    "ps"  '(org-timer-stop :which-key "stop pomodoro")
    "p."  '(org-timer-pause-or-continue :which-key "pause or resume pomodoro")

    "s"  '(:ignore t :which-key "search")
    "sg" '(rg-project :which-key "ripgrep project")
    "so" '(sort-lines :which-key "sort lines")
    "ss" '(swiper :which-key "swiper")

    "t"  '(:ignore t :which-key "toggle")
 "t TAB" '(tab-bar-mode :which-key "toggle tab bar")
   "t t" '(treemacs :which-key "toggle treemacs")

    "TAB"  '(:ignore t :which-key "tab")
    "TAB d" '(tab-close :which-key "close tab")
    "TAB j" '(tab-previous :which-key "previous tab")
    "TAB k" '(tab-next :which-key "next tab")
    "TAB l" '(tab-list :which-key "list of tabs")
    "TAB n" '(tab-new :which-key "new tab")
    "TAB y" '(tab-new :which-key "duplicate tab")
  "TAB TAB" '(tab-recent :which-key "recent tab")

    "w"  '(:ignore t :which-key "window")
    "wh" '(windmove-left :which-key "move left")
    "wj" '(windmove-down :which-key "move down")
    "wk" '(windmove-up :which-key "move up")
    "wl" '(windmove-right :which-key "move right")
    "wt" '(tear-off-window :which-key "tear off window")

    "vt" '(vterm :which-key "vterm"))

   (my-leader-def
    :keymaps 'evil-insert-state-map
   )

   (my-leader-def
    :keymaps 'org-mode-map
    (kbd "<C-c> <C-t>") #'org-todo)
#+end_src

* THEME
** font
#+begin_src emacs-lisp
   (set-frame-font "jetbrains mono 12" nil t)
;; (set-frame-font "ms gothic 13" nil t)
#+end_src

** theme
#+begin_src emacs-lisp
  (use-package doom-themes)
  (use-package ef-themes)

  (setq dark-theme 'doom-meltbus)
  (setq light-theme 'leuven)

  (defun night-mode ()
    (interactive)
    (disable-theme light-theme)
    (add-hook 'pdf-view-mode 'pdf-view-midnight-minor-mode t)
    (load-theme dark-theme t))

  (defun day-mode ()
    (interactive)
    (disable-theme dark-theme)
    (add-hook 'pdf-view-mode 'pdf-view-midnight-minor-mode nil)
    (load-theme light-theme t))

  (defun toggle-day-night-mode ()
    (interactive)
    (let* ((current-time (current-time))
           (current-hour (nth 2 (decode-time current-time))))
      (if (or (> current-hour 20) (< current-hour 6))
          (night-mode)
        (day-mode))))

  (toggle-day-night-mode)
#+end_src

* PACKAGES
** pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :pin manual
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width))

  (use-package pdf-view-restore
  :after pdf-tools
  :config
  (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+end_src

** auto-complete
#+begin_src emacs-lisp
(use-package auto-complete
    :ensure t
    :config
    (ac-config-default))
#+end_src

** flycheck (syntax-checking)
#+begin_src emacs-lisp
(use-package flycheck
     :ensure t)
#+end_src

** elcord (rpc)
#+begin_src emacs-lisp
(use-package elcord
  :ensure t
  :config
  (setq elcord-client-id "1333674662613356554")
  (elcord-mode 1))
#+end_src emacs-lisp

** gcmh (garbage collector)
#+begin_src emacs-lisp
  (use-package gcmh)
  (gcmh-mode 1)
#+end_src

** keepass
#+begin_src emacs-lisp
  (use-package keepass-mode
    :ensure t
    :config)
#+end_src

** jabber
#+begin_src emacs-lisp
  (use-package jabber
      :ensure t)

  (setq jabber-account-list
      `((,(getenv "JABBER_USER")
         (:password . ,(getenv "JABBER_PASSWORD"))
         (:network-server . ,(getenv "JABBER_SERVER"))
         (:connection-type . ssl))))

  (setq jabber-auto-reconnect t)
  (setq jabber-history-enabled t)
#+end_src

** smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure smartparens
    :config
  (smartparens-global-mode t))
#+end_src

** indentation
#+begin_src emacs-lisp
(use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode t))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-side-window-location 'bottom)
    (setq which-key-max-display-columns nil)
    (setq which-key-min-display-lines 1)
    (which-key-mode)
    (setq which-key-idle-delay 0))
#+end_src

** popup
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))

  (use-package consult
    :ensure t
    :config)

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src

** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook ((python-mode . lsp)
         (c++-mode . lsp)
         (java-mode . lsp)
         (js-mode . lsp)
         (html-mode . lsp)
         (css-mode . lsp)
         (go-mode . lsp))
  :commands lsp)

(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-doc-enable t
        lsp-ui-imenu-enable t)
  :hook (lsp-mode . lsp-ui-mode))

(use-package company
  :ensure t
  :after lsp-mode
  :config
  (add-hook 'lsp-mode-hook 'company-mode))

(use-package dap-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-mode 1)
  (dap-ui-mode 1))
#+end_src

** company-mode
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

** yafolding
#+begin_src emacs-lisp
  (use-package yafolding
    :ensure t)
#+end_src

** magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

** orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** nyan-mode
#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode 1)) 
#+end_src

** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init)

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src

** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-items '((recents  . 5)
                            (agenda . 5)
                            (projects . 5)))
    (setq dashboard-set-heading-icons t
            dashboard-set-file-icons t
            dashboard-startup-banner 'official)
    (dashboard-setup-startup-hook))
#+end_src

* HOOKS
** org-mode
#+begin_src emacs-lisp
  (use-package org-fragtog)
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (add-hook 'org-mode-hook 'org-display-inline-images)
#+end_src

** pdf-tools
#+begin_src emacs-lisp
(add-hook 'pdf-view-mode-hook
    (lambda ()
        (display-line-numbers-mode -1)
        (blink-cursor-mode -1)))
#+end_src

* ORG MODE
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-graph-executable "dot")
    :custom
    (org-roam-directory "~/org")
    :config
    (org-roam-setup))

  (defun my/org-roam-node-has-tag (node tag)
    (member tag (org-roam-node-tags node)))

  (defun my/org-roam-node-find-by-tag ()
    (interactive)
    (let ((tag (read-string "Enter tag: ")))
      (org-roam-node-find nil nil (lambda (node) (my/org-roam-node-has-tag node tag)))))

  (setq org-roam-completion-system 'ido)

  (setq org-roam-capture-templates
      '(("d" "default" plain "%?"
         :target (file+head "${slug}.org" "#+options: toc:nil\n#+title: ${title}\n#+created: %<%Y-%m-%d>\n")
         :unnarrowed t)))
#+end_src

** deft
#+begin_src emacs-lisp
  (use-package deft)
  (setq deft-directory "~/org")
#+end_src

** export to ~/org/exports
#+begin_src emacs-lisp
  (setq org-publish-project-alist
  '(("html"
     :base-directory "~/org/"
     :base-extension "org"
     :publishing-directory "~/org/exports"
     :publishing-function org-html-export-to-html)
    ("pdf"
     :base-directory "~/org/"
     :base-extension "org"
     :publishing-directory "~/org/exports"
     :publishing-function org-latex-export-to-pdf)
    ("all" :components ("html" "pdf"))))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(setq org-agenda-files '("~/org"))
#+end_src

* DIRECTORY SHORTCUTS
#+begin_src emacs-lisp
  (setq directories
  '((proj . "~/projects/")
    (docs . "~/Documents/")
    (books . "f:/books/")
    (org . "~/org/")
    (downloads . "~/Downloads/")))

  (defun find-file-in-directory (alias)
  (interactive
   (list (intern (completing-read "choose directory: " (mapcar (lambda (pair) (symbol-name (car pair))) directories)))))
  (let ((dir (cdr (assoc alias directories))))
    (if dir
        (let ((file (read-file-name "select file: " dir)))
          (find-file file))
      (message "directory not found"))))
#+end_src
